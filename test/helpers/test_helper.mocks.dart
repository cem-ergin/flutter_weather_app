// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_weather_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i14;
import 'dart:typed_data' as _i11;
import 'dart:ui' as _i12;

import 'package:bloc/bloc.dart' as _i9;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter_weather_app/api/models/weather_response.dart' as _i6;
import 'package:flutter_weather_app/api/repositories/weather_client.dart'
    as _i5;
import 'package:flutter_weather_app/api/repositories/weather_repository.dart'
    as _i2;
import 'package:flutter_weather_app/blocs/theme/theme_bloc.dart' as _i10;
import 'package:flutter_weather_app/blocs/weather/weather_bloc.dart' as _i3;
import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherRepository_0 extends _i1.SmartFake
    implements _i2.WeatherRepository {
  _FakeWeatherRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherState_1 extends _i1.SmartFake implements _i3.WeatherState {
  _FakeWeatherState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssetBundle_2 extends _i1.SmartFake implements _i4.AssetBundle {
  _FakeAssetBundle_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeData_3 extends _i1.SmartFake implements _i4.ThemeData {
  _FakeThemeData_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeWeatherClient_4 extends _i1.SmartFake implements _i5.WeatherClient {
  _FakeWeatherClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherResponse_5 extends _i1.SmartFake
    implements _i6.WeatherResponse {
  _FakeWeatherResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_6 extends _i1.SmartFake implements _i7.Client {
  _FakeClient_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_7<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_8 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_9 extends _i1.SmartFake
    implements _i7.StreamedResponse {
  _FakeStreamedResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherBloc extends _i1.Mock implements _i3.WeatherBloc {
  @override
  _i2.WeatherRepository get weatherRepository => (super.noSuchMethod(
        Invocation.getter(#weatherRepository),
        returnValue: _FakeWeatherRepository_0(
          this,
          Invocation.getter(#weatherRepository),
        ),
        returnValueForMissingStub: _FakeWeatherRepository_0(
          this,
          Invocation.getter(#weatherRepository),
        ),
      ) as _i2.WeatherRepository);

  @override
  _i3.WeatherState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWeatherState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeWeatherState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.WeatherState);

  @override
  _i8.Stream<_i3.WeatherState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i3.WeatherState>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.WeatherState>.empty(),
      ) as _i8.Stream<_i3.WeatherState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i3.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.WeatherState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.WeatherEvent>(
    _i9.EventHandler<E, _i3.WeatherState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i9.Transition<_i3.WeatherEvent, _i3.WeatherState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i3.WeatherState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeBloc extends _i1.Mock implements _i10.ThemeBloc {
  @override
  _i4.AssetBundle get assetBundle => (super.noSuchMethod(
        Invocation.getter(#assetBundle),
        returnValue: _FakeAssetBundle_2(
          this,
          Invocation.getter(#assetBundle),
        ),
        returnValueForMissingStub: _FakeAssetBundle_2(
          this,
          Invocation.getter(#assetBundle),
        ),
      ) as _i4.AssetBundle);

  @override
  _i4.ThemeData get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeThemeData_3(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeThemeData_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.ThemeData);

  @override
  _i8.Stream<_i4.ThemeData> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i4.ThemeData>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.ThemeData>.empty(),
      ) as _i8.Stream<_i4.ThemeData>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i10.ThemeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i10.ThemeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.ThemeData? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i10.ThemeEvent>(
    _i9.EventHandler<E, _i4.ThemeData>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i9.Transition<_i10.ThemeEvent, _i4.ThemeData>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i4.ThemeData>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i2.WeatherRepository {
  @override
  _i5.WeatherClient get weatherClient => (super.noSuchMethod(
        Invocation.getter(#weatherClient),
        returnValue: _FakeWeatherClient_4(
          this,
          Invocation.getter(#weatherClient),
        ),
        returnValueForMissingStub: _FakeWeatherClient_4(
          this,
          Invocation.getter(#weatherClient),
        ),
      ) as _i5.WeatherClient);

  @override
  _i8.Future<_i6.WeatherResponse> getWeather() => (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [],
        ),
        returnValue:
            _i8.Future<_i6.WeatherResponse>.value(_FakeWeatherResponse_5(
          this,
          Invocation.method(
            #getWeather,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.WeatherResponse>.value(_FakeWeatherResponse_5(
          this,
          Invocation.method(
            #getWeather,
            [],
          ),
        )),
      ) as _i8.Future<_i6.WeatherResponse>);
}

/// A class which mocks [WeatherClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherClient extends _i1.Mock implements _i5.WeatherClient {
  @override
  _i7.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_6(
          this,
          Invocation.getter(#httpClient),
        ),
        returnValueForMissingStub: _FakeClient_6(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i7.Client);

  @override
  _i8.Future<_i6.WeatherResponse> getWeather({
    double? latitude = 40.89,
    double? longitude = -8.615,
    int? pastDays = 3,
    int? forecastDays = 7,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [],
          {
            #latitude: latitude,
            #longitude: longitude,
            #pastDays: pastDays,
            #forecastDays: forecastDays,
          },
        ),
        returnValue:
            _i8.Future<_i6.WeatherResponse>.value(_FakeWeatherResponse_5(
          this,
          Invocation.method(
            #getWeather,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
              #pastDays: pastDays,
              #forecastDays: forecastDays,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.WeatherResponse>.value(_FakeWeatherResponse_5(
          this,
          Invocation.method(
            #getWeather,
            [],
            {
              #latitude: latitude,
              #longitude: longitude,
              #pastDays: pastDays,
              #forecastDays: forecastDays,
            },
          ),
        )),
      ) as _i8.Future<_i6.WeatherResponse>);
}

/// A class which mocks [AssetBundle].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetBundle extends _i1.Mock implements _i4.AssetBundle {
  @override
  _i8.Future<_i11.ByteData> load(String? key) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [key],
        ),
        returnValue: _i8.Future<_i11.ByteData>.value(_i11.ByteData(0)),
        returnValueForMissingStub:
            _i8.Future<_i11.ByteData>.value(_i11.ByteData(0)),
      ) as _i8.Future<_i11.ByteData>);

  @override
  _i8.Future<_i12.ImmutableBuffer> loadBuffer(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadBuffer,
          [key],
        ),
        returnValue: _i8.Future<_i12.ImmutableBuffer>.value(
            _i13.dummyValue<_i12.ImmutableBuffer>(
          this,
          Invocation.method(
            #loadBuffer,
            [key],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i12.ImmutableBuffer>.value(
            _i13.dummyValue<_i12.ImmutableBuffer>(
          this,
          Invocation.method(
            #loadBuffer,
            [key],
          ),
        )),
      ) as _i8.Future<_i12.ImmutableBuffer>);

  @override
  _i8.Future<String> loadString(
    String? key, {
    bool? cache = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadString,
          [key],
          {#cache: cache},
        ),
        returnValue: _i8.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #loadString,
            [key],
            {#cache: cache},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #loadString,
            [key],
            {#cache: cache},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<T> loadStructuredData<T>(
    String? key,
    _i8.Future<T> Function(String)? parser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadStructuredData,
          [
            key,
            parser,
          ],
        ),
        returnValue: _i13.ifNotNull(
              _i13.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #loadStructuredData,
                  [
                    key,
                    parser,
                  ],
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #loadStructuredData,
                [
                  key,
                  parser,
                ],
              ),
            ),
        returnValueForMissingStub: _i13.ifNotNull(
              _i13.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #loadStructuredData,
                  [
                    key,
                    parser,
                  ],
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #loadStructuredData,
                [
                  key,
                  parser,
                ],
              ),
            ),
      ) as _i8.Future<T>);

  @override
  _i8.Future<T> loadStructuredBinaryData<T>(
    String? key,
    _i8.FutureOr<T> Function(_i11.ByteData)? parser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadStructuredBinaryData,
          [
            key,
            parser,
          ],
        ),
        returnValue: _i13.ifNotNull(
              _i13.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #loadStructuredBinaryData,
                  [
                    key,
                    parser,
                  ],
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #loadStructuredBinaryData,
                [
                  key,
                  parser,
                ],
              ),
            ),
        returnValueForMissingStub: _i13.ifNotNull(
              _i13.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #loadStructuredBinaryData,
                  [
                    key,
                    parser,
                  ],
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #loadStructuredBinaryData,
                [
                  key,
                  parser,
                ],
              ),
            ),
      ) as _i8.Future<T>);

  @override
  void evict(String? key) => super.noSuchMethod(
        Invocation.method(
          #evict,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  @override
  _i8.Future<_i7.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i11.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
        returnValueForMissingStub:
            _i8.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i8.Future<_i11.Uint8List>);

  @override
  _i8.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_9(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_9(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i7.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
